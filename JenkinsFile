pipeline {
    agent any

    environment {
        DOCKERHUB_REPO_FE = 'angular-frontend'
        DOCKERHUB_REPO_BE = 'backend-app'
        AWS_REGION = 'us-east-2'
    }

    stages {
        stage('Checkout') {
            steps {
                git branch: 'main', url: 'https://github.com/priyangshu-chakraborty/CRMDashboardTrackify.git'
            }
        }

        stage('Build Backend') {
            steps {
                dir('crm') {
                    bat 'mvn clean package -DskipTests'
                }
            }
        }

        stage('Build Frontend') {
            steps {
                dir('trackify-frontend') {
                    bat 'npm install'
                    bat 'npm run build -- --configuration production'
                }
            }
        }

        stage('Docker Build & Push') {
            steps {
                withCredentials([usernamePassword(credentialsId: 'dockerhub-creds',
                                                  usernameVariable: 'DOCKERHUB_USER',
                                                  passwordVariable: 'DOCKERHUB_PASS')]) {
                    bat """
                    docker build -t %DOCKERHUB_USER%/%DOCKERHUB_REPO_BE%:latest crm
                    docker build -t %DOCKERHUB_USER%/%DOCKERHUB_REPO_FE%:latest trackify-frontend
                    echo %DOCKERHUB_PASS% | docker login -u %DOCKERHUB_USER% --password-stdin
                    docker push %DOCKERHUB_USER%/%DOCKERHUB_REPO_BE%:latest
                    docker push %DOCKERHUB_USER%/%DOCKERHUB_REPO_FE%:latest
                    """
                }
            }
        }

        stage('Terraform Apply') {
            steps {
                withCredentials([[$class: 'AmazonWebServicesCredentialsBinding',
                                  credentialsId: 'aws-creds']]) {
                    dir('infra') {
                        bat 'terraform init'
                        bat 'terraform apply -auto-approve'
                    }
                }
            }
        }

        stage('Deploy to EC2') {
            steps {
                withCredentials([sshUserPrivateKey(credentialsId: 'EC2_KEY', keyFileVariable: 'KEYFILE')]) {
                    script {
                        dir('infra') {
                            // Get EC2 public IP
                            def ec2_ip = bat(script: 'terraform output -raw ec2_public_ip', returnStdout: true).trim()
                            echo "âœ… EC2 Public IP: ${ec2_ip}"
                        }

                        // Now run SSH using PowerShell (bat can be finicky with SSH on Windows)
                        powershell """
                        echo "Connecting to EC2 at ${ec2_ip}..."
                        ssh -o StrictHostKeyChecking=no -i ${KEYFILE} ec2-user@${ec2_ip} "docker compose -f ~/docker-compose.yml pull && docker compose -f ~/docker-compose.yml up -d"
                        """
                    }
                }
            }
        }
    }
}
