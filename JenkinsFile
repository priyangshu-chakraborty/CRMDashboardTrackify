pipeline {
    agent any

    environment {
        DOCKERHUB_REPO_FE = 'angular-frontend'
        DOCKERHUB_REPO_BE = 'backend-app'
        AWS_REGION = 'us-east-2'
    }

    stages {
        stage('Checkout') {
            steps {
                git 'https://github.com/priyangshu-chakraborty/CRMDashboardTrackify.git'
            }
        }

        stage('Build Backend') {
            steps {
                dir('crm') {
                    sh 'mvn clean package -DskipTests'
                }
            }
        }

        stage('Build Frontend') {
            steps {
                dir('trackify-frontend') {
                    sh 'npm install'
                    sh 'npm run build --configuration production'
                }
            }
        }

        stage('Docker Build & Push') {
            steps {
                withCredentials([usernamePassword(credentialsId: 'dockerhub-creds',
                                                  usernameVariable: 'DOCKERHUB_USER',
                                                  passwordVariable: 'DOCKERHUB_PASS')]) {
                    sh """
                    docker build -t $DOCKERHUB_USER/$DOCKERHUB_REPO_BE:latest crm
                    docker build -t $DOCKERHUB_USER/$DOCKERHUB_REPO_FE:latest trackify-frontend
                    echo $DOCKERHUB_PASS | docker login -u $DOCKERHUB_USER --password-stdin
                    docker push $DOCKERHUB_USER/$DOCKERHUB_REPO_BE:latest
                    docker push $DOCKERHUB_USER/$DOCKERHUB_REPO_FE:latest
                    """
                }
            }
        }

        stage('Terraform Apply') {
            steps {
                withCredentials([[$class: 'AmazonWebServicesCredentialsBinding',
                                  credentialsId: 'aws-creds']]) {
                    dir('infra') {
                        sh 'terraform init'
                        sh 'terraform apply -auto-approve'
                    }
                }
            }
        }

        stage('Deploy to EC2') {
            steps {
                withCredentials([sshUserPrivateKey(credentialsId: 'ec2-key',
                                                  keyFileVariable: 'EC2_KEY',
                                                  usernameVariable: 'EC2_USER')]) {
                    script {
                        // Capture EC2 public IP from Terraform output
                        def ec2Ip = sh(script: "terraform -chdir=infra output -raw ec2_public_ip", returnStdout: true).trim()

                        // SSH into EC2 and deploy with docker-compose
                        sh """
                        ssh -o StrictHostKeyChecking=no -i $EC2_KEY $EC2_USER@${ec2Ip} \\
                        'docker compose -f ~/docker-compose.yml pull && docker compose -f ~/docker-compose.yml up -d'
                        """
                    }
                }
            }
        }
    }
}
